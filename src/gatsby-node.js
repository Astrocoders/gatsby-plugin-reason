import { compileFileSync, runBuildSync } from 'bsb-js';

import fs from 'fs';
import path from 'path';

const REASON_TEST = /\.(ml|re)$/;

const isReasonFile = fileName => REASON_TEST.test(fileName);

export const modifyWebpackConfig = ({ config }) =>
    config.loader('reason', {
        test: REASON_TEST,
        loader: 'bs-loader'
    });

const jsFilePath = (buildDir, moduleDir, resourcePath, inSource, bsSuffix) => {
    const mlFileName = resourcePath.replace(buildDir, '');
    const jsFileName = mlFileName.replace(REASON_TEST, bsSuffix);

    if (inSource) {
        return path.join(buildDir, jsFileName);
    }

    return path.join(buildDir, 'lib', moduleDir, jsFileName);
};

export const preprocessSource = ({ filename }) => {
    if (!isReasonFile(filename)) {
        return null;
    }
    const moduleDir = 'js';
    const compiledFilePath = jsFilePath(process.cwd(), moduleDir, filename, false, '.bs.js');
    try {
        return compileFileSync(moduleDir, compiledFilePath);
    } catch (e) {
        // Don't need to print error message since bsb will already do that
    }
};

export const resolvableExtensions = () => ['.ml', '.re'];

const isCompiledComponent = path => path.endsWith('.bs.js');
const isReasonComponent = path => path.endsWith('.re');

// TODO can we parse the AST generated by refmt to more reliably get the component name?
const isComponentLine = line => line.indexOf('let component') !== -1;

/**
 * Names of different functions that can be used to create a component in ReasonReact
 * Used to parse the name from page components to create the URL path
 */
const COMPONENT_FUNCS = [
    'statelessComponent',
    'statelessComponentWithRetainedProps',
    'reducerComponent',
    'reducerComponentWithRetainedProps'
];
/**
 * Find the line that contains the component definition
 * e.g. `let component = ReasonReact.statelessComponent("MyComponent");`
 */
const getComponentDefinitionLine = path =>
    fs
        .readFileSync(path, 'utf-8')
        .split('\n')
        .filter(Boolean)
        .filter(isComponentLine)[0];

const getNameFromReasonComponent = componentDef =>
    COMPONENT_FUNCS.map(func => new RegExp(`${func}\\("(.*?)"\\)`))
        .map(regex => regex.exec(componentDef))
        .filter(Boolean)
        .map(regexMatch => regexMatch[1])[0];

const getPathForComponent = path => {
    const line = getComponentDefinitionLine(path);
    if (!line) {
        return;
    }

    const name = getNameFromReasonComponent(line);
    if (name === 'index') {
        return '';
    }
    return name;
};

export const onCreatePage = args => {
    const {
        page,
        boundActionCreators: { createPage, deletePage }
    } = args;

    return new Promise((resolve, reject) => {
        const oldPage = Object.assign({}, page);
        const { component } = page;
        // Remove .bs components so we don't have duplicates
        if (isCompiledComponent(component)) {
            deletePage(oldPage);
        } else if (isReasonComponent(component)) {
            console.log(page);
            const path = getPathForComponent(component);
            console.log('path:', path);
            if (path !== undefined) {
                const newPage = Object.assign({}, page, { path: `/${path}/` });
                deletePage(oldPage);
                createPage(newPage);
            }
        }

        resolve();
    });
};
